#clang-tidy example command-line : clang-tidy -p .\build\Debug --extra-arg=--sysroot="C:/Program Files (x86)/Arm GNU Toolchain arm-none-eabi/13.3 rel1/arm-none-eabi/" .\Core\Src\hardware\buttons\buttons.c
---
#Arguments to make clang-tidy work with the cross-compiler
ExtraArgs:
  - "--target=arm-none-eabi"
  - "-Wno-unknown-warning-option"

#Checks enabled : all except :
  # cppcoreguidelines-avoid-non-const-global-variables  : Lots of global variables are used, and can't all be set as const
  # altera-unroll-loops                                 : Almost each loop triggers a warning, and it's too restrictive
  # llvmlibc-restrict-system-libc-headers               : System headers will be used
  # llvm-include-order                                  : Format style is based on Google's, which is incompatible
  # hicpp-no-assembler                                  : LL libraries use direct assembly
  # performance-no-int-to-ptr                           : GPIO ports are int addresses casted to pointers
  # google-readability-todo                             : Just plain annoying
Checks: "*,\
  -cppcoreguidelines-avoid-non-const-global-variables,\
  -altera-unroll-loops,\
  -llvmlibc-restrict-system-libc-headers,\
  -llvm-include-order,\
  -hicpp-no-assembler,\
  -performance-no-int-to-ptr,\
  -google-readability-todo"

#Check if .clang-format is respected
FormatStyle:
  file

#Use colours in output, if possible
UseColor:
  true

#Naming formats rules
CheckOptions:
  - key: 'readability-identifier-naming.ConstantCase'
    value: 'UPPER_CASE'
  - key: 'readability-identifier-naming.EnumCase'
    value: 'UPPER_CASE'
  - key: 'readability-identifier-naming.EnumConstantCase'
    value: 'UPPER_CASE'
  - key: 'readability-identifier-naming.FunctionCase'
    value: 'camelBack'
  - key: 'readability-identifier-naming.LocalConstantCase'
    value: 'aNy_CasE'
...
