name: Build and lint
on: 
  push:
    paths-ignore:
      - 'schematics/**'
      - '.gitignore'
      - '.github/workflows/verify_kicad.yml'
  pull_request:
    paths-ignore:
      - 'schematics/**'
      - '.gitignore'
      - '.github/workflows/verify_kicad.yml'

jobs:
  build:
    name: Build the firmware
    runs-on: ubuntu-latest
    strategy:
      matrix:
        configuration: [Debug, Release]

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Install GNU Arm Embedded Toolchain - latest
        uses: carlosperate/arm-none-eabi-gcc-action@v1
        id: arm-none-eabi-gcc-action
        with:
          release: latest

      - name: Install Ninja Build
        uses: turtlesec-no/get-ninja@main
      
      - name: Configure CMake
        run: cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/cmake/gcc-arm-none-eabi.cmake -B ${{github.workspace}}/build/${{ matrix.configuration }} -G Ninja

      - name: Compile the firmware
        run: cmake --build ${{github.workspace}}/build/${{ matrix.configuration }}

      - name: Save the CMake configuration folder
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.configuration }}
          path: ${{github.workspace}}/build/${{ matrix.configuration }}
          if-no-files-found: error

  clang-tidy:
    name: Code Quality (clang-tidy)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Download the saved CMake configuration folder
        uses: actions/download-artifact@v4
        with:
          name: build-Debug
          path: ${{github.workspace}}/build/Debug

      - name: Install GNU Arm Embedded Toolchain - latest
        uses: carlosperate/arm-none-eabi-gcc-action@v1
        id: arm-none-eabi-gcc-action
        with:
          release: latest

      - name: Check the GNU Arm Embedded Toolchain triplet
        run: ls -la ${{ steps.arm-none-eabi-gcc-action.outputs.path }}/../arm-none-eabi

      - name: Install clang-tidy
        run: sudo apt-get install -y clang clang-tidy

      - name: run clang-tidy
        run:  >
              /usr/bin/run-clang-tidy
              -quiet
              -p ${{github.workspace}}/build/Debug/
              -extra-arg=--sysroot=${{ steps.arm-none-eabi-gcc-action.outputs.path }}/../arm-none-eabi
              -extra-arg=--target=arm-none-eabi
              files "Components"

  cppcheck:
    name: Coding constructs (Cppcheck)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Download the saved CMake configuration folder
        uses: actions/download-artifact@v4
        with:
          name: build-Debug
          path: ${{github.workspace}}/build/Debug

      - name: Install CppCheck
        run: sudo apt-get install -y cppcheck

      - name: Run CppCheck
        run:  >
              cppcheck
              --enable=all
              --language=c
              --inconclusive
              --error-exitcode=2
              --project=${{github.workspace}}/build/Debug/compile_commands.json
              --cppcheck-build-dir=${{github.workspace}}/config-cppcheck-build-dir/
              -i${{github.workspace}}/build/
              -i${{github.workspace}}/Drivers/
              -i${{github.workspace}}/Core/Src/dma.c/
              -i${{github.workspace}}/Core/Src/gpio.c/
              -i${{github.workspace}}/Core/Src/iwdg.c/
              -i${{github.workspace}}/Core/Src/spi.c/
              -i${{github.workspace}}/Core/Src/syscalls.c/
              -i${{github.workspace}}/Core/Src/sysmem.c/
              -i${{github.workspace}}/Core/Src/system_stm32f1xx.c/

  flawfinder:
    name: Security weakness (Flawfinder)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Run flawfinder
        uses: david-a-wheeler/flawfinder@2.0.19
        with:
          arguments: Components/

  lizard:
    name: Cyclomatic complexity (Lizard)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Run Lizard
        uses: Uno-Takashi/Lizard-Runner@v3
        with:
          path: Components/
          language: cpp

  sonarcloud:
    name: Code Quality (SonarCloud)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Download the saved CMake configuration folder
        uses: actions/download-artifact@v4
        with:
          name: build-Debug
          path: ${{github.workspace}}/build/Debug

      - name: Install GNU Arm Embedded Toolchain - latest
        uses: carlosperate/arm-none-eabi-gcc-action@v1
        id: arm-none-eabi-gcc-action
        with:
          release: latest

      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v3

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: >
          sonar-scanner
          --define sonar.cfamily.compile-commands="${{github.workspace}}/build/Debug/compile_commands.json"

  doxygen:
    name: Documentation (Doxygen)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Install Doxygen
        run: sudo apt-get install -y doxygen

      - name: Run Doxygen
        run: doxygen Doxyfile
