name: Firmware Build and lint
on:
  push:
    paths:
      - 'firmware/**'
      - '!firmware/resources/**'
      - '.github/workflows/firmware_build_lint.yml'
  pull_request:
    paths:
      - 'firmware/**'
      - '!firmware/resources/**'
      - '.github/workflows/firmware_build_lint.yml'

jobs:
#
# Build the firmware on Linux and Windows
#
  build:
    name: Build the firmware
    runs-on: ${{ matrix.os }}
    strategy:
       matrix:
          os: [ubuntu-latest, windows-latest]
          include:
            - os: windows-latest
              sys: ucrt64
              env: ucrt-x86_64

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
            submodules: recursive

      #Only for Linux
      - name: Install GNU Arm Embedded Toolchain - latest
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: carlosperate/arm-none-eabi-gcc-action@v1
        id: arm-none-eabi-gcc-action
        with:
          release: 'latest'

      #Only for Linux
      - name: Install Ninja Build
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: turtlesec-no/get-ninja@main

      #Only for Windows
      - name: Set up MSYS2
        if: ${{ matrix.os == 'windows-latest' }}
        id: setup-msys2
        uses: msys2/setup-msys2@v2
        with:
          update: false
          cache: true
          msystem: ${{matrix.sys}}
          install: >-
            mingw-w64-${{matrix.env}}-arm-none-eabi-gcc
            mingw-w64-${{matrix.env}}-cmake

      #Only for Windows
      - name: Save the MSYS2 install directory in %PATH%
        if: ${{ matrix.os == 'windows-latest' }}
        shell: powershell
        run: |
          echo "${{ steps.setup-msys2.outputs.msys2-location }}/${{matrix.sys}}/bin" >> $env:GITHUB_PATH

      - name: Configure CMake and build (Debug)
        run:  |
              cd ${{github.workspace}}/firmware/
              cmake --preset Debug
              cmake --build --preset Debug

      - name: Configure CMake and build (Release)
        run:  |
              cd ${{github.workspace}}/firmware/
              cmake --preset Release
              cmake --build --preset Release

      #Only for Linux
      - name: Save the Debug CMake configuration folder
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: build-Debug
          path: ${{github.workspace}}/firmware/build/Debug
          if-no-files-found: error


#
# Run code quality and documentation checks
#
  clang-tidy:
    name: Code Quality (clang-tidy 19)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
            submodules: recursive

      - name: Download the saved CMake configuration folder
        uses: actions/download-artifact@v4
        with:
          name: build-Debug
          path: ${{github.workspace}}/firmware/build/Debug

      - name: Install GNU Arm Embedded Toolchain - latest
        uses: carlosperate/arm-none-eabi-gcc-action@v1
        id: arm-none-eabi-gcc-action
        with:
          release: latest

      - name: Check the GNU Arm Embedded Toolchain triplet
        run: ls -la ${{ steps.arm-none-eabi-gcc-action.outputs.path }}/../arm-none-eabi

      - name: Install clang-tidy
        run: sudo apt-get install -y clang-19 clang-tidy-19

      - name: Remove "-fanalyzer" from compile_commands.json
        run: sed -i 's/-fanalyzer//g' ${{github.workspace}}/firmware/build/Debug/compile_commands.json

      - name: run clang-tidy
        run:  >
              /usr/bin/run-clang-tidy-19
              -quiet
              -p ${{github.workspace}}/firmware/build/Debug/
              -extra-arg=--sysroot=${{ steps.arm-none-eabi-gcc-action.outputs.path }}/../arm-none-eabi
              -extra-arg=--target=armv7m-none-eabi
              -extra-arg=-mthumb
              -header-filter=.*
              "(Hardware|UI)"

  cppcheck:
    name: Coding constructs (Cppcheck)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
            submodules: recursive

      - name: Download the saved CMake configuration folder
        uses: actions/download-artifact@v4
        with:
          name: build-Debug
          path: ${{github.workspace}}/firmware/build/Debug

      - name: Install CppCheck
        run: sudo apt-get install -y cppcheck

      - name: Create CPPcheck build directory
        run: mkdir -p ${{github.workspace}}/firmware/config-cppcheck-build-dir/

      - name: Run CppCheck
        run:  >
              cppcheck
              --enable=all
              --language=c
              --inconclusive
              --inline-suppr
              --error-exitcode=2
              --check-level=exhaustive
              --project=${{github.workspace}}/firmware/build/Debug/compile_commands.json
              --cppcheck-build-dir=${{github.workspace}}/firmware/config-cppcheck-build-dir/
              -i${{github.workspace}}/firmware/build/
              -i${{github.workspace}}/firmware/Drivers/
              -i${{github.workspace}}/firmware/Middlewares/
              -i${{github.workspace}}/firmware/schematics/
              -i${{github.workspace}}/firmware/Core/
              --suppress=missingIncludeSystem
              --suppress=missingInclude
              --suppress=unusedFunction

  flawfinder:
    name: Security weakness (Flawfinder)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
            submodules: recursive

      - name: Run flawfinder
        uses: david-a-wheeler/flawfinder@2.0.19
        with:
          arguments: firmware/Hardware/

  lizard:
    name: Cyclomatic complexity (Lizard)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
            submodules: recursive

      - name: Run Lizard
        uses: Uno-Takashi/Lizard-Runner@v3
        with:
          path: firmware/Hardware/
          language: cpp

  doxygen:
    name: Documentation (Doxygen)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
            submodules: recursive

      - name: Install Doxygen
        run: sudo apt-get install -y doxygen

      - name: Run Doxygen
        run: doxygen firmware/resources/Doxyfile
